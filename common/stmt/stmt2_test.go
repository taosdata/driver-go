package stmt

import (
	"database/sql/driver"
	"math"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/taosdata/driver-go/v3/common"
)

type customInt int

func TestMarshalBinary(t *testing.T) {
	largeTableName := ""
	for i := 0; i < math.MaxUint16; i++ {
		largeTableName += "a"
	}
	type args struct {
		t        []*TaosStmt2BindData
		isInsert bool
		tagType  []*StmtField
		colType  []*StmtField
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name: "TestSetTableName",
			args: args{
				t: []*TaosStmt2BindData{
					{
						TableName: "test1",
					},
					{
						TableName: "",
					},
					{
						TableName: "test2",
					},
				},
				isInsert: true,
				tagType:  nil,
				colType:  nil,
			},
			want: []byte{
				// total Length
				0x2f, 0x00, 0x00, 0x00,
				// tableCount
				0x03, 0x00, 0x00, 0x00,
				// TagCount
				0x00, 0x00, 0x00, 0x00,
				// ColCount
				0x00, 0x00, 0x00, 0x00,
				// TableNamesOffset
				0x1c, 0x00, 0x00, 0x00,
				// TagsOffset
				0x00, 0x00, 0x00, 0x00,
				// ColOffset
				0x00, 0x00, 0x00, 0x00,
				// table names
				// TableNameLength
				0x06, 0x00,
				0x01, 0x00,
				0x06, 0x00,
				// test1
				0x74, 0x65, 0x73, 0x74, 0x31, 0x00,
				// nil
				0x00,
				// test2
				0x74, 0x65, 0x73, 0x74, 0x32, 0x00,
			},
			wantErr: false,
		},
		{
			name: "wrong TableName length",
			args: args{
				t: []*TaosStmt2BindData{
					{
						TableName: largeTableName,
					},
				},
				isInsert: true,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "TestSetTableNameAndTags",
			args: args{
				t: []*TaosStmt2BindData{
					{
						TableName: "test1",
						Tags: []driver.Value{
							// ts 1726803356466
							time.Unix(1726803356, 466000000),
							// bool
							true,
							// tinyint
							int8(1),
							// smallint
							int16(2),
							// int
							int32(3),
							// bigint
							int64(4),
							// float
							float32(5.5),
							// double
							float64(6.6),
							// utinyint
							uint8(7),
							// usmallint
							uint16(8),
							// uint
							uint32(9),
							// ubigint
							uint64(10),
							// binary
							[]byte("binary"),
							// nchar
							"nchar",
							// geometry
							[]byte{0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40},
							// varbinary
							[]byte("varbinary"),
						},
					},
					{
						TableName: "testnil",
						Tags: []driver.Value{
							// ts 1726803356466
							nil,
							// bool
							nil,
							// tinyint
							nil,
							// smallint
							nil,
							// int
							nil,
							// bigint
							nil,
							// float
							nil,
							// double
							nil,
							// utinyint
							nil,
							// usmallint
							nil,
							// uint
							nil,
							// ubigint
							nil,
							// binary
							nil,
							// nchar
							nil,
							// geometry
							nil,
							// varbinary
							nil,
						},
					},
					{
						TableName: "test2",
						Tags: []driver.Value{
							// ts 1726803356466
							time.Unix(1726803356, 466000000),
							// bool
							true,
							// tinyint
							int8(1),
							// smallint
							int16(2),
							// int
							int32(3),
							// bigint
							int64(4),
							// float
							float32(5.5),
							// double
							float64(6.6),
							// utinyint
							uint8(7),
							// usmallint
							uint16(8),
							// uint
							uint32(9),
							// ubigint
							uint64(10),
							// binary
							[]byte("binary"),
							// nchar
							"nchar",
							// geometry
							[]byte{0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40},
							// varbinary
							[]byte("varbinary"),
						},
					},
				},
				isInsert: true,
				tagType: []*StmtField{
					{
						FieldType: common.TSDB_DATA_TYPE_TIMESTAMP,
						Precision: common.PrecisionMilliSecond,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BOOL,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_TINYINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_SMALLINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_INT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BIGINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_FLOAT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_DOUBLE,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UTINYINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_USMALLINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UBIGINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BINARY,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_NCHAR,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_GEOMETRY,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_VARBINARY,
					},
				},
				colType: nil,
			},
			want: []byte{
				// total Length
				0x8a, 0x04, 0x00, 0x00,
				// tableCount
				0x03, 0x00, 0x00, 0x00,
				// TagCount
				0x10, 0x00, 0x00, 0x00,
				// ColCount
				0x00, 0x00, 0x00, 0x00,
				// TableNamesOffset
				0x1c, 0x00, 0x00, 0x00,
				// TagsOffset
				0x36, 0x00, 0x00, 0x00,
				// ColOffset
				0x00, 0x00, 0x00, 0x00,
				// table names
				// TableNameLength
				0x06, 0x00,
				0x08, 0x00,
				0x06, 0x00,
				// test1
				0x74, 0x65, 0x73, 0x74, 0x31, 0x00,
				// testnil
				0x74, 0x65, 0x73, 0x74, 0x6e, 0x69, 0x6c, 0x00,
				// test2
				0x74, 0x65, 0x73, 0x74, 0x32, 0x00,

				// tags

				// tagsDataLength
				// table1 DataLength
				0x8c, 0x01, 0x00, 0x00,
				// table2 DataLength
				0x30, 0x01, 0x00, 0x00,
				// table3 DataLength
				0x8c, 0x01, 0x00, 0x00,

				// tagsData
				// table1 tags
				// tag1 timestamp
				// totalLength
				0x1a, 0x00, 0x00, 0x00,

				// type
				0x09, 0x00, 0x00, 0x00,

				// num
				0x01, 0x00, 0x00, 0x00,

				// isnull
				0x00,

				// haveLength
				0x00,

				//buffer length
				0x08, 0x00, 0x00, 0x00,

				// buffer
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,

				// tag2 bool
				0x13, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,

				// tag3 tinyint
				0x13, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,

				// tag4 smallint
				0x14, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x02, 0x00, 0x00, 0x00,
				0x02, 0x00,

				// tag5 int
				0x16, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,

				// tag6 bigint
				0x1a, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// tag7 float
				0x16, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xb0, 0x40,

				// tag8 double
				0x1a, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1a, 0x40,

				// tag9 utinyint
				0x13, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x07,

				// tag10 usmallint
				0x14, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x02, 0x00, 0x00, 0x00,
				0x08, 0x00,

				// tag11 uint
				0x16, 0x00, 0x00, 0x00,
				0x0d, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,

				// tag12 ubigint
				0x1a, 0x00, 0x00, 0x00,
				0x0e, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// tag13 binary
				0x1c, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				// length
				0x06, 0x00, 0x00, 0x00,
				// buffer length
				0x06, 0x00, 0x00, 0x00,
				//buffer
				0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,

				// tag14 nchar
				0x1b, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x05, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x6e, 0x63, 0x68, 0x61, 0x72,

				// tag15 geometry
				0x2b, 0x00, 0x00, 0x00,
				0x14, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x15, 0x00, 0x00, 0x00,
				0x15, 0x00, 0x00, 0x00,
				0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40,

				// tag16 varbinary
				0x1f, 0x00, 0x00, 0x00,
				0x10, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x09, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,
				0x76, 0x61, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,

				// table 2 tags
				// tag1 timestamp nil
				// TotalLength
				0x12, 0x00, 0x00, 0x00,
				// type
				0x09, 0x00, 0x00, 0x00,
				// num
				0x01, 0x00, 0x00, 0x00,
				// isnull
				0x01,
				// haveLength
				0x00,
				// buffer length
				0x00, 0x00, 0x00, 0x00,

				// tag2 bool nil
				0x12, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag3 tinyint nil
				0x12, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag4 smallint nil
				0x12, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag5 int nil
				0x12, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				//  tag6 bigint nil
				0x12, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag7 float nil
				0x12, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag8 double nil
				0x12, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag9 utinyint nil
				0x12, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag10 usmallint nil
				0x12, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag11 uint nil
				0x12, 0x00, 0x00, 0x00,
				0x0d, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag12 ubigint nil
				0x12, 0x00, 0x00, 0x00,
				0x0e, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag13 binary nil
				0x16, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x01,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag14 nchar nil
				0x16, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x01,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag15 geometry nil
				0x16, 0x00, 0x00, 0x00,
				0x14, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x01,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,

				// tag16 varbinary nil
				0x16, 0x00, 0x00, 0x00,
				0x10, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,
				0x01,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,

				// table 3 tags
				// tag1 timestamp
				0x1a, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,

				// tag2 bool
				0x13, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,

				// tag3 tinyint
				0x13, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,

				// tag4 smallint
				0x14, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x02, 0x00, 0x00, 0x00,
				0x02, 0x00,

				// tag5 int
				0x16, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,

				// tag6 bigint
				0x1a, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,

				// tag7 float
				0x00, 0x00, 0x00, 0x00,
				0x16, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00,
				0x01,
				0x00,
				0x00, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xb0, 0x40,

				// tag8 double
				0x1a, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1a, 0x40,

				// tag9 utinyint
				0x13, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x07,

				// tag10 usmallint
				0x14, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x02, 0x00, 0x00, 0x00,
				0x08, 0x00,

				// tag11 uint
				0x16, 0x00, 0x00, 0x00,
				0x0d, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,

				// tag12 ubigint
				0x1a, 0x00, 0x00, 0x00,
				0x0e, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// tag13 binary
				0x1c, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x06, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00,
				0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,

				// tag14 nchar
				0x1b, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x05, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x6e, 0x63, 0x68, 0x61, 0x72,

				// tag15 geometry
				0x2b, 0x00, 0x00, 0x00,
				0x14, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x15, 0x00, 0x00, 0x00,
				0x15, 0x00, 0x00, 0x00,
				0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40,

				// tag16 varbinary
				0x1f, 0x00, 0x00, 0x00,
				0x10, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x09, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,
				0x76, 0x61, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
			},
			wantErr: false,
		},
		{
			name: "TestAllData",
			args: args{
				t: []*TaosStmt2BindData{
					{
						TableName: "test1",
						Tags: []driver.Value{
							// ts 1726803356466
							time.Unix(1726803356, 466000000),
							// bool
							true,
							// tinyint
							int8(1),
							// smallint
							int16(2),
							// int
							int32(3),
							// bigint
							int64(4),
							// float
							float32(5.5),
							// double
							float64(6.6),
							// utinyint
							uint8(7),
							// usmallint
							uint16(8),
							// uint
							uint32(9),
							// ubigint
							uint64(10),
							// binary
							[]byte("binary"),
							// nchar
							"nchar",
							// geometry
							[]byte{0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40},
							// varbinary
							[]byte("varbinary"),
						},
						Cols: [][]driver.Value{
							{
								// ts 1726803356466
								time.Unix(1726803356, 466000000),
								// ts 1726803357466
								time.Unix(1726803357, 466000000),
								// ts 1726803358466
								time.Unix(1726803358, 466000000),
							},
							{
								// BOOL
								true,
								nil,
								false,
							},
							{
								// TINYINT
								int8(11),
								nil,
								int8(12),
							},
							{
								// SMALLINT
								int16(11),
								nil,
								int16(12),
							},
							{
								// INT
								int32(11),
								nil,
								int32(12),
							},
							{
								// BIGINT
								int64(11),
								nil,
								int64(12),
							},
							{
								// FLOAT
								float32(11.2),
								nil,
								float32(12.2),
							},
							{
								// DOUBLE
								float64(11.2),
								nil,
								float64(12.2),
							},
							{
								// TINYINT UNSIGNED
								uint8(11),
								nil,
								uint8(12),
							},
							{
								// SMALLINT UNSIGNED
								uint16(11),
								nil,
								uint16(12),
							},
							{
								// INT UNSIGNED
								uint32(11),
								nil,
								uint32(12),
							},
							{
								// BIGINT UNSIGNED
								uint64(11),
								nil,
								uint64(12),
							},
							{
								// BINARY
								[]byte("binary1"),
								nil,
								[]byte("binary2"),
							},
							{
								// NCHAR
								"nchar1",
								nil,
								"nchar2",
							},
							{
								// GEOMETRY `point(100 100)`
								[]byte{0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40},
								nil,
								[]byte{0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40},
							},
							{
								// VARBINARY
								[]byte("varbinary1"),
								nil,
								[]byte("varbinary2"),
							},
						},
					},
				},
				isInsert: true,
				tagType: []*StmtField{
					{
						FieldType: common.TSDB_DATA_TYPE_TIMESTAMP,
						Precision: common.PrecisionMilliSecond,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BOOL,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_TINYINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_SMALLINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_INT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BIGINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_FLOAT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_DOUBLE,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UTINYINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_USMALLINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UBIGINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BINARY,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_NCHAR,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_GEOMETRY,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_VARBINARY,
					},
				},
				colType: []*StmtField{
					{
						FieldType: common.TSDB_DATA_TYPE_TIMESTAMP,
						Precision: common.PrecisionMilliSecond,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BOOL,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_TINYINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_SMALLINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_INT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BIGINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_FLOAT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_DOUBLE,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UTINYINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_USMALLINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_UBIGINT,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BINARY,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_NCHAR,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_GEOMETRY,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_VARBINARY,
					},
				},
			},
			want: []byte{
				// TotalLength
				0x19, 0x04, 0x00, 0x00,
				// tableCount
				0x01, 0x00, 0x00, 0x00,
				// TagCount
				0x10, 0x00, 0x00, 0x00,
				// ColCount
				0x10, 0x00, 0x00, 0x00,
				// TableNamesOffset
				0x1c, 0x00, 0x00, 0x00,
				// TagsOffset
				0x24, 0x00, 0x00, 0x00,
				// ColsOffset
				0xb4, 0x01, 0x00, 0x00,

				// TableNameLength
				0x06, 0x00,
				// TableNameBuffer
				0x74, 0x65, 0x73, 0x74, 0x31, 0x00,

				// TagsDataLength
				0x8c, 0x01, 0x00, 0x00,

				// TagsBuffer

				// tag1 timestamp
				// TotalLength
				0x1a, 0x00, 0x00, 0x00,
				// type
				0x09, 0x00, 0x00, 0x00,
				// num
				0x01, 0x00, 0x00, 0x00,
				// isnull
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x08, 0x00, 0x00, 0x00,
				// buffer
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,

				// tag2 bool
				0x13, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,

				// tag3 tinyint
				0x13, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x01,

				// tag4 smallint
				0x14, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x02, 0x00, 0x00, 0x00,
				0x02, 0x00,

				// tag5 int
				0x16, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,

				// tag6 bigint
				0x1a, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// tag7 float
				0x16, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xb0, 0x40,

				// tag8 double
				0x1a, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x1a, 0x40,

				// tag9 utinyint
				0x13, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x01, 0x00, 0x00, 0x00,
				0x07,

				// tag10 usmallint
				0x14, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x02, 0x00, 0x00, 0x00,
				0x08, 0x00,

				// tag11 uint
				0x16, 0x00, 0x00, 0x00,
				0x0d, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,

				// tag12 ubigint
				0x1a, 0x00, 0x00, 0x00,
				0x0e, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// tag13 binary
				0x1c, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				// haveLength
				0x01,
				// length
				0x06, 0x00, 0x00, 0x00,
				//buffer length
				0x06, 0x00, 0x00, 0x00,
				0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,

				// tag14 nchar
				0x1b, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x05, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x6e, 0x63, 0x68, 0x61, 0x72,

				// tag15 geometry
				0x2b, 0x00, 0x00, 0x00,
				0x14, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x15, 0x00, 0x00, 0x00,
				0x15, 0x00, 0x00, 0x00,
				0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40,

				// tag16 varbinary
				0x1f, 0x00, 0x00, 0x00,
				0x10, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x01,
				0x09, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,
				0x76, 0x61, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,

				// ColDataLength
				0x61, 0x02, 0x00, 0x00,

				// ColBuffer
				// col1 timestamp
				// TotalLength
				0x2c, 0x00, 0x00, 0x00,
				// Type
				0x09, 0x00, 0x00, 0x00,
				// Num
				0x03, 0x00, 0x00, 0x00,
				// IsNull
				0x00, 0x00, 0x00,
				//haveLength
				0x00,
				// BufferLength
				0x18, 0x00, 0x00, 0x00,
				// Buffer
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,
				0x1a, 0x2f, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,
				0x02, 0x33, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,

				// col2 bool
				0x17, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				// is null, row index 1 is null
				0x00, 0x01, 0x00,
				0x00,
				0x03, 0x00, 0x00, 0x00,

				// row0
				0x01,
				// row1
				0x00,
				// row2
				0x00,

				// col3 tinyint
				0x17, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x03, 0x00, 0x00, 0x00,

				0x0b,
				0x00,
				0x0c,

				// col4 smallint
				0x1a, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x06, 0x00, 0x00, 0x00,

				0x0b, 0x00,
				0x00, 0x00,
				0x0c, 0x00,

				// col5 int
				0x20, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x0c, 0x00, 0x00, 0x00,

				0x0b, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00,

				// col6 bigint
				0x2c, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x18, 0x00, 0x00, 0x00,

				0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// col7 float
				0x20, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x0c, 0x00, 0x00, 0x00,
				0x33, 0x33, 0x33, 0x41,
				0x00, 0x00, 0x00, 0x00,
				0x33, 0x33, 0x43, 0x41,

				// col8 double
				0x2c, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x18, 0x00, 0x00, 0x00,

				0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x26, 0x40,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x28, 0x40,

				// col9 utinyint
				0x17, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x03, 0x00, 0x00, 0x00,

				0x0b,
				0x00,
				0x0c,

				// col10 usmallint
				0x1a, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x06, 0x00, 0x00, 0x00,

				0x0b, 0x00,
				0x00, 0x00,
				0x0c, 0x00,

				// col11 uint
				0x20, 0x00, 0x00, 0x00,
				0x0d, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x0c, 0x00, 0x00, 0x00,

				0x0b, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00,

				// col12 ubigint
				0x2C, 0x00, 0x00, 0x00,
				0x0e, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x00,
				0x18, 0x00, 0x00, 0x00,

				0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// col13 binary
				0x2e, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				// have length
				0x01,
				// length
				0x07, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x00,
				// buffer length
				0x0e, 0x00, 0x00, 0x00,
				// buffer
				0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x31,
				0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x32,

				// col14 nchar
				0x2c, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x01,
				// length
				0x06, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x06, 0x00, 0x00, 0x00,
				// buffer length
				0x0c, 0x00, 0x00, 0x00,
				// buffer
				0x6e, 0x63, 0x68, 0x61, 0x72, 0x31,
				0x6e, 0x63, 0x68, 0x61, 0x72, 0x32,

				// col15 geometry
				0x4a, 0x00, 0x00, 0x00,
				0x14, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x01,
				// length
				0x15, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x15, 0x00, 0x00, 0x00,
				// buffer length
				0x2a, 0x00, 0x00, 0x00,
				// buffer
				0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40,
				0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40,

				// col16 varbinary
				0x34, 0x00, 0x00, 0x00,
				0x10, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00,
				0x01,
				// length
				0x0a, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x0a, 0x00, 0x00, 0x00,
				// buffer length
				0x14, 0x00, 0x00, 0x00,
				// buffer
				0x76, 0x61, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x31,
				0x76, 0x61, 0x72, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x32,
			},
			wantErr: false,
		},
		{
			name: "TestQuery",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: [][]driver.Value{
							{
								// ts 1726803356466
								time.Unix(1726803356, 466000000).UTC(),
							},
							{
								// BOOL
								true,
							},
							{
								// TINYINT
								int8(11),
							},
							{
								// SMALLINT
								int16(11),
							},
							{
								// INT
								int32(11),
							},
							{
								// BIGINT
								int64(11),
							},
							{
								// FLOAT
								float32(11.2),
							},
							{
								// DOUBLE
								float64(11.2),
							},
							{
								// TINYINT UNSIGNED
								uint8(11),
							},
							{
								// SMALLINT UNSIGNED
								uint16(11),
							},
							{
								// INT UNSIGNED
								uint32(11),
							},
							{
								// BIGINT UNSIGNED
								uint64(11),
							},
							{
								// Bytes
								[]byte("binary1"),
							},
							{
								// String
								"nchar1",
							},
						},
					},
				},
				isInsert: false,
			},
			want: []byte{
				// total Length
				0x78, 0x01, 0x00, 0x00,
				// tableCount
				0x01, 0x00, 0x00, 0x00,
				// TagCount
				0x00, 0x00, 0x00, 0x00,
				// ColCount
				0x0e, 0x00, 0x00, 0x00,
				// TableNamesOffset
				0x00, 0x00, 0x00, 0x00,
				// TagsOffset
				0x00, 0x00, 0x00, 0x00,
				// ColOffset
				0x1c, 0x00, 0x00, 0x00,
				// cols
				// col length
				0x58, 0x01, 0x00, 0x00,
				//table 0 cols
				//col 0
				//total length
				0x2e, 0x00, 0x00, 0x00,
				//type
				0x08, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x01,
				// length
				0x18, 0x00, 0x00, 0x00,
				// buffer length
				0x18, 0x00, 0x00, 0x00,
				0x32, 0x30, 0x32, 0x34, 0x2d, 0x30, 0x39, 0x2d, 0x32, 0x30, 0x54, 0x30, 0x33, 0x3a, 0x33, 0x35, 0x3a, 0x35, 0x36, 0x2e, 0x34, 0x36, 0x36, 0x5a,

				//col 1
				//total length
				0x13, 0x00, 0x00, 0x00,
				//type
				0x01, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x01, 0x00, 0x00, 0x00,
				0x01,

				//col 2
				//total length
				0x13, 0x00, 0x00, 0x00,
				//type
				0x02, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x01, 0x00, 0x00, 0x00,
				0x0b,

				//col 3
				//total length
				0x14, 0x00, 0x00, 0x00,
				//type
				0x03, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x02, 0x00, 0x00, 0x00,
				0x0b, 0x00,

				//col 4
				//total length
				0x16, 0x00, 0x00, 0x00,
				//type
				0x04, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x04, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00,

				//col 5
				//total length
				0x1a, 0x00, 0x00, 0x00,
				//type
				0x05, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x08, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				//col 6
				//total length
				0x16, 0x00, 0x00, 0x00,
				//type
				0x06, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x04, 0x00, 0x00, 0x00,
				0x33, 0x33, 0x33, 0x41,

				//col 7
				//total length
				0x1a, 0x00, 0x00, 0x00,
				//type
				0x07, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x08, 0x00, 0x00, 0x00,
				0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x26, 0x40,

				//col 8
				//total length
				0x13, 0x00, 0x00, 0x00,
				//type
				0x0b, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x01, 0x00, 0x00, 0x00,
				0x0b,

				//col 9
				//total length
				0x14, 0x00, 0x00, 0x00,
				//type
				0x0c, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x02, 0x00, 0x00, 0x00,
				0x0b, 0x00,

				//col 10
				//total length
				0x16, 0x00, 0x00, 0x00,
				//type
				0x0d, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x04, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00,

				//col 11
				//total length
				0x1a, 0x00, 0x00, 0x00,
				//type
				0x0e, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x08, 0x00, 0x00, 0x00,
				0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				//col 12
				//total length
				0x1d, 0x00, 0x00, 0x00,
				//type
				0x08, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x01,
				// length
				0x07, 0x00, 0x00, 0x00,
				// buffer length
				0x07, 0x00, 0x00, 0x00,
				0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x31,

				//col 13
				//total length
				0x1c, 0x00, 0x00, 0x00,
				//type
				0x08, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x01,
				// length
				0x06, 0x00, 0x00, 0x00,
				// buffer length
				0x06, 0x00, 0x00, 0x00,
				0x6e, 0x63, 0x68, 0x61, 0x72, 0x31,
			},
			wantErr: false,
		},
		{
			name: "Three Table",
			args: args{
				t: []*TaosStmt2BindData{
					{
						TableName: "table1",
						Cols: [][]driver.Value{
							{
								// ts 1726803356466
								time.Unix(1726803356, 466000000),
							},
							{
								int64(1),
							},
						},
						Tags: []driver.Value{int32(1)},
					},
					{
						TableName: "table2",
						Cols: [][]driver.Value{
							{
								// ts 1726803356466
								time.Unix(1726803356, 466000000),
							},
							{
								int64(2),
							},
						},
						Tags: []driver.Value{int32(2)},
					},
					{
						TableName: "table3",
						Cols: [][]driver.Value{
							{
								// ts 1726803356466
								time.Unix(1726803356, 466000000),
							},
							{
								int64(3),
							},
						},
						Tags: []driver.Value{int32(3)},
					},
				},
				colType: []*StmtField{
					{
						FieldType: common.TSDB_DATA_TYPE_TIMESTAMP,
						Precision: common.PrecisionMilliSecond,
					},
					{
						FieldType: common.TSDB_DATA_TYPE_BIGINT,
					},
				},
				tagType: []*StmtField{
					{
						FieldType: common.TSDB_DATA_TYPE_INT,
					},
				},
				isInsert: true,
			},
			want: []byte{
				// TotalLength
				0x2d, 0x01, 0x00, 0x00,
				// tableCount
				0x03, 0x00, 0x00, 0x00,
				// TagCount
				0x01, 0x00, 0x00, 0x00,
				// ColCount
				0x02, 0x00, 0x00, 0x00,
				// TableNamesOffset
				0x1c, 0x00, 0x00, 0x00,
				// TagsOffset
				0x37, 0x00, 0x00, 0x00,
				// ColsOffset
				0x85, 0x00, 0x00, 0x00,
				// TableNameLength
				0x07, 0x00,
				0x07, 0x00,
				0x07, 0x00,
				// TableNameBuffer
				0x74, 0x61, 0x62, 0x6c, 0x65, 0x31, 0x00,
				0x74, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x00,
				0x74, 0x61, 0x62, 0x6c, 0x65, 0x33, 0x00,
				// TagsDataLength
				0x16, 0x00, 0x00, 0x00,
				0x16, 0x00, 0x00, 0x00,
				0x16, 0x00, 0x00, 0x00,
				// TagsBuffer
				0x16, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,

				0x16, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00,

				0x16, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x04, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00,

				// ColDataLength
				0x34, 0x00, 0x00, 0x00,
				0x34, 0x00, 0x00, 0x00,
				0x34, 0x00, 0x00, 0x00,

				// ColBuffer
				0x1a, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,

				0x1a, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				0x1a, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,

				0x1a, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				0x1a, 0x00, 0x00, 0x00,
				0x09, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00,

				0x1a, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x00, 0x00,
				0x00,
				0x00,
				0x08, 0x00, 0x00, 0x00,
				0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			wantErr: false,
		},
		{
			name: "empty",
			args: args{
				t:        nil,
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong tag count",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Tags: []driver.Value{int32(1)},
					},
				},
				isInsert: true,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong col count",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: [][]driver.Value{
							{
								int32(1),
							},
						},
					},
				},
				isInsert: true,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "query has tag type",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: [][]driver.Value{
							{
								int32(1),
							},
						},
					},
				},
				isInsert: false,
				tagType: []*StmtField{{
					FieldType: common.TSDB_DATA_TYPE_INT,
				}},
				colType: nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "query has col type",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: [][]driver.Value{
							{
								int32(1),
							},
						},
					},
				},
				isInsert: false,
				tagType:  nil,
				colType: []*StmtField{{
					FieldType: common.TSDB_DATA_TYPE_INT,
				}},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "query has multi data",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: [][]driver.Value{
							{
								int32(1),
							},
						},
					},
					{
						Cols: [][]driver.Value{
							{
								int32(1),
							},
						},
					},
				},
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "query has tablename",
			args: args{
				t: []*TaosStmt2BindData{
					{
						TableName: "table1",
					},
				},
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "query has tag",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Tags: []driver.Value{int32(1)},
					},
				},
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "query without data",
			args: args{
				t: []*TaosStmt2BindData{
					{},
				},
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "query with multi rows",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: [][]driver.Value{
							{
								int32(1),
								int32(1),
							},
						},
					},
				},
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong bool",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{int32(1)},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_BOOL}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong tinyint",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_TINYINT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong smallint",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_SMALLINT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong int",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_INT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong bigint",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_BIGINT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong tinyint unsigned",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_UTINYINT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong smallint unsigned",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_USMALLINT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong int unsigned",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_UINT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong bigint unsigned",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_UBIGINT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong float",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_FLOAT}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong double",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_DOUBLE}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong binary",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_BINARY}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "wrong timestamp",
			args: args{
				t: []*TaosStmt2BindData{{
					Tags: []driver.Value{true},
				}},
				isInsert: true,
				tagType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_TIMESTAMP}},
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "insert nil timestamp",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: [][]driver.Value{
							{
								time.Unix(1726803356, 466000000),
								nil,
							},
						},
					},
				},
				isInsert: true,
				tagType:  nil,
				colType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_TIMESTAMP}},
			},
			want: []byte{
				// total Length
				0x43, 0x00, 0x00, 0x00,
				// tableCount
				0x01, 0x00, 0x00, 0x00,
				// TagCount
				0x00, 0x00, 0x00, 0x00,
				// ColCount
				0x01, 0x00, 0x00, 0x00,
				// TableNamesOffset
				0x00, 0x00, 0x00, 0x00,
				// TagsOffset
				0x00, 0x00, 0x00, 0x00,
				// ColOffset
				0x1c, 0x00, 0x00, 0x00,
				// cols
				// col length
				0x23, 0x00, 0x00, 0x00,
				//table 0 cols
				//col 0
				//total length
				0x23, 0x00, 0x00, 0x00,
				//type
				0x09, 0x00, 0x00, 0x00,
				//num
				0x02, 0x00, 0x00, 0x00,
				//is null
				0x00,
				0x01,
				// haveLength
				0x00,
				// buffer length
				0x10, 0x00, 0x00, 0x00,
				0x32, 0x2b, 0x80, 0x0d, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			wantErr: false,
		},
		{
			name: "query bool false",
			args: args{
				t: []*TaosStmt2BindData{{
					Cols: [][]driver.Value{
						{false},
					},
				}},
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want: []byte{
				// total Length
				0x33, 0x00, 0x00, 0x00,
				// tableCount
				0x01, 0x00, 0x00, 0x00,
				// TagCount
				0x00, 0x00, 0x00, 0x00,
				// ColCount
				0x01, 0x00, 0x00, 0x00,
				// TableNamesOffset
				0x00, 0x00, 0x00, 0x00,
				// TagsOffset
				0x00, 0x00, 0x00, 0x00,
				// ColOffset
				0x1c, 0x00, 0x00, 0x00,
				// cols
				// col length
				0x13, 0x00, 0x00, 0x00,
				//table 0 cols
				//col 0
				//total length
				0x13, 0x00, 0x00, 0x00,
				//type
				0x01, 0x00, 0x00, 0x00,
				//num
				0x01, 0x00, 0x00, 0x00,
				//is null
				0x00,
				// haveLength
				0x00,
				// buffer length
				0x01, 0x00, 0x00, 0x00,
				0x00,
			},
			wantErr: false,
		},
		{
			name: "query unsupported type",
			args: args{
				t: []*TaosStmt2BindData{{
					Cols: [][]driver.Value{
						{customInt(1)},
					},
				}},
				isInsert: false,
				tagType:  nil,
				colType:  nil,
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "insert unsupported type",
			args: args{
				t: []*TaosStmt2BindData{{
					Cols: [][]driver.Value{
						{int32(1)},
					},
				}},
				isInsert: true,
				tagType:  nil,
				colType:  []*StmtField{{FieldType: common.TSDB_DATA_TYPE_NULL}},
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "nil",
			args: args{
				t: []*TaosStmt2BindData{
					{
						Cols: nil,
					},
				},
				isInsert: true,
				tagType:  nil,
				colType:  []*StmtField{},
			},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := MarshalStmt2Binary(tt.args.t, tt.args.isInsert, tt.args.colType, tt.args.tagType)
			if (err != nil) != tt.wantErr {
				t.Errorf("MarshalStmt2Binary() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			assert.Equal(t, tt.want, got)
		})
	}
}
