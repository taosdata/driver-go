package parser

import (
	"database/sql/driver"
	"fmt"
	"testing"
	"time"
	"unsafe"

	"github.com/stretchr/testify/assert"
)

func TestParse(t *testing.T) {
	data := []byte{
		0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01,
		0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x01, 0x00, 0x00, 0x00,

		0x01,
		0x01,

		0xc5, 0x01,

		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,

		0x02,

		0x02, 0x00, 0x00, 0x00,
		0xb3, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,
		0x06, 0x04, 0x00, 0x00, 0x00,
		0x08, 0x82, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x5c, 0x00, 0x00, 0x00,

		0x00,
		0xc0, 0xed, 0x82, 0x05, 0xc3, 0x1b, 0xab, 0x17,

		0x80,
		0x00, 0x00, 0x00, 0x00,

		0x80,
		0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x5a, 0x00,
		0x61, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34, 0x34,
		0x34, 0x61,

		0x08,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x03,
		0x63, 0x31, 0x00,

		0x06,
		0x01,
		0x08,
		0x06,
		0x03,
		0x63, 0x32, 0x00,

		0x08,
		0x01,
		0x84, 0x02,
		0x08,
		0x03, 0x63, 0x33, 0x00,

		0x05,
		0x63, 0x74, 0x62, 0x30, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	parser := NewTMQRawDataParser()
	blockInfos, err := parser.Parse(unsafe.Pointer(&data[0]))
	assert.NoError(t, err)
	assert.Equal(t, 1, len(blockInfos))
	assert.Equal(t, 2, blockInfos[0].Precision)
	assert.Equal(t, 4, len(blockInfos[0].Schema))
	assert.Equal(t, []*TMQRawDataSchema{
		{
			ColType: 9,
			Flag:    1,
			Bytes:   8,
			ColID:   1,
			Name:    "ts",
		},
		{
			ColType: 4,
			Flag:    1,
			Bytes:   4,
			ColID:   2,
			Name:    "c1",
		},
		{
			ColType: 6,
			Flag:    1,
			Bytes:   4,
			ColID:   3,
			Name:    "c2",
		},
		{
			ColType: 8,
			Flag:    1,
			Bytes:   130,
			ColID:   4,
			Name:    "c3",
		},
	}, blockInfos[0].Schema)
	assert.Equal(t, "ctb0", blockInfos[0].TableName)
}

func TestParseTwoBlock(t *testing.T) {
	data := []byte{
		0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01,
		0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x02, 0x00, 0x00, 0x00,

		0x00, // withTbName false
		0x01, // withSchema true

		0x60,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x4e, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,
		0x08, 0x0c, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00,

		0x00,
		0xf8, 0x6b, 0x75, 0x35, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x00, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x03, 0x00,
		0x63, 0x74, 0x30,

		0x06,
		0x00,

		0x09,
		0x00,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x00,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x08,
		0x00,
		0x18,
		0x06,
		0x02,
		0x6e, 0x00,

		0x60,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,

		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x4e, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,
		0x08, 0x0c, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00,

		0x00,
		0xf9, 0x6b, 0x75, 0x35,
		0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x01, 0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00,
		0x03, 0x00,
		0x63, 0x74, 0x31,

		0x06,
		0x00,

		0x09,
		0x00,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x00,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x08,
		0x00,
		0x18,
		0x06,
		0x02,
		0x6e, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	parser := NewTMQRawDataParser()
	blockInfos, err := parser.Parse(unsafe.Pointer(&data[0]))
	assert.NoError(t, err)
	assert.Equal(t, 2, len(blockInfos))
	assert.Equal(t, 0, blockInfos[0].Precision)
	assert.Equal(t, 0, blockInfos[1].Precision)
	assert.Equal(t, 3, len(blockInfos[0].Schema))
	assert.Equal(t, []*TMQRawDataSchema{
		{
			ColType: 9,
			Flag:    0,
			Bytes:   8,
			ColID:   1,
			Name:    "ts",
		},
		{
			ColType: 4,
			Flag:    0,
			Bytes:   4,
			ColID:   2,
			Name:    "v",
		},
		{
			ColType: 8,
			Flag:    0,
			Bytes:   12,
			ColID:   3,
			Name:    "n",
		},
	}, blockInfos[0].Schema)
	assert.Equal(t, []*TMQRawDataSchema{
		{
			ColType: 9,
			Flag:    0,
			Bytes:   8,
			ColID:   1,
			Name:    "ts",
		},
		{
			ColType: 4,
			Flag:    0,
			Bytes:   4,
			ColID:   2,
			Name:    "v",
		},
		{
			ColType: 8,
			Flag:    0,
			Bytes:   12,
			ColID:   3,
			Name:    "n",
		},
	}, blockInfos[1].Schema)
	assert.Equal(t, "", blockInfos[0].TableName)
	assert.Equal(t, "", blockInfos[1].TableName)
}

func TestParseTenBlock(t *testing.T) {
	data := []byte{
		0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01,
		0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0a, 0x00, 0x00, 0x00,
		0x01,
		0x01,

		// block1
		0x4e,

		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x01, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x31, 0x00,

		//block2
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,

		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,
		0x00,
		0x02, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x32, 0x00,

		//block3
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,

		0x00,
		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x03, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x33, 0x00,

		//block4
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x04, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x34, 0x00,

		// block5
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x05, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x35, 0x00,

		//block6
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x06, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x36, 0x00,

		//block7
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x07, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x37, 0x00,

		//block8
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x08, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x38, 0x00,

		//block9
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,

		0x00,
		0x09, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,

		0x03,
		0x74, 0x39, 0x00,

		//block10
		0x4e,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x3c, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x52, 0xed, 0x5b, 0x3a, 0x8d, 0x01, 0x00, 0x00,
		0x00,
		0x0a, 0x00, 0x00, 0x00,

		0x04,
		0x00,

		0x09,
		0x01,
		0x10,
		0x02,
		0x03,
		0x74, 0x73, 0x00,

		0x04,
		0x01,
		0x08,
		0x04,
		0x02,
		0x76, 0x00,
		0x04,
		0x74, 0x31, 0x30, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	parser := NewTMQRawDataParser()
	blockInfos, err := parser.Parse(unsafe.Pointer(&data[0]))
	assert.NoError(t, err)
	assert.Equal(t, 10, len(blockInfos))
	for i := 0; i < 10; i++ {
		assert.Equal(t, 0, blockInfos[i].Precision)
		assert.Equal(t, 2, len(blockInfos[i].Schema))
		assert.Equal(t, []*TMQRawDataSchema{
			{
				ColType: 9,
				Flag:    1,
				Bytes:   8,
				ColID:   1,
				Name:    "ts",
			},
			{
				ColType: 4,
				Flag:    1,
				Bytes:   4,
				ColID:   2,
				Name:    "v",
			},
		}, blockInfos[i].Schema)
		assert.Equal(t, fmt.Sprintf("t%d", i+1), blockInfos[i].TableName)
		value := ReadBlockSimple(blockInfos[i].RawBlock, blockInfos[i].Precision)
		ts := time.Unix(0, 1706081119570000000).Local()
		assert.Equal(t, [][]driver.Value{{ts, int32(i + 1)}}, value)
	}
}

func TestVersion100Block(t *testing.T) {
	data := []byte{
		0x64,                   //version
		0x12, 0x00, 0x00, 0x00, // skip 18 bytes
		0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, //block count 1

		0x01, // with table name
		0x01, // with schema

		0x92, 0x02, // block length 274
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
		0x00,

		0x02, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x00, 0x00, // 256
		0x01, 0x00, 0x00, 0x00, // rows
		0x0e, 0x00, 0x00, 0x00, // cols
		0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x09, 0x08, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x00, 0x00, 0x00,
		0x02, 0x01, 0x00, 0x00, 0x00,
		0x03, 0x02, 0x00, 0x00, 0x00,
		0x04, 0x04, 0x00, 0x00, 0x00,
		0x05, 0x08, 0x00, 0x00, 0x00,
		0x0b, 0x01, 0x00, 0x00, 0x00,
		0x0c, 0x02, 0x00, 0x00, 0x00,
		0x0d, 0x04, 0x00, 0x00, 0x00,
		0x0e, 0x08, 0x00, 0x00, 0x00,
		0x06, 0x04, 0x00, 0x00, 0x00,
		0x07, 0x08, 0x00, 0x00, 0x00,
		0x08, 0x16, 0x00, 0x00, 0x00,
		0x0a, 0x52, 0x00, 0x00, 0x00,

		0x08, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00,
		0x16, 0x00, 0x00, 0x00,

		0x00,
		0x9e, 0x37, 0x6a, 0x04, 0x8f, 0x01, 0x00, 0x00,

		0x00,
		0x01,

		0x00,
		0x02,

		0x00,
		0x03, 0x00,

		0x00,
		0x04, 0x00, 0x00, 0x00,

		0x00,
		0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x00,
		0x06,

		0x00,
		0x07, 0x00,

		0x00,
		0x08, 0x00, 0x00, 0x00,

		0x00,
		0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x00,
		0xcf, 0xf7, 0x21, 0x41,

		0x00,
		0xe5, 0xd0, 0x22, 0xdb, 0xf9, 0x3e, 0x26, 0x40,

		0x00, 0x00, 0x00, 0x00,
		0x06, 0x00,
		0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,

		0x00, 0x00, 0x00, 0x00,
		0x14, 0x00,
		0x6e, 0x00, 0x00, 0x00,
		0x63, 0x00, 0x00, 0x00,
		0x68, 0x00, 0x00, 0x00,
		0x61, 0x00, 0x00, 0x00,
		0x72, 0x00, 0x00, 0x00,

		0x00, //

		0x1c, // cols 14
		0x00, // version

		// col meta
		0x09, 0x01, 0x10, 0x02, 0x03, 0x74, 0x73, 0x00,
		0x01, 0x01, 0x02, 0x04, 0x03, 0x63, 0x31, 0x00,
		0x02, 0x01, 0x02, 0x06, 0x03, 0x63, 0x32, 0x00,
		0x03, 0x01, 0x04, 0x08, 0x03, 0x63, 0x33, 0x00,
		0x04, 0x01, 0x08, 0x0a, 0x03, 0x63, 0x34, 0x00,
		0x05, 0x01, 0x10, 0x0c, 0x03, 0x63, 0x35, 0x00,
		0x0b, 0x01, 0x02, 0x0e, 0x03, 0x63, 0x36, 0x00,
		0x0c, 0x01, 0x04, 0x10, 0x03, 0x63, 0x37, 0x00,
		0x0d, 0x01, 0x08, 0x12, 0x03, 0x63, 0x38, 0x00,
		0x0e, 0x01, 0x10, 0x14, 0x03, 0x63, 0x39, 0x00,
		0x06, 0x01, 0x08, 0x16, 0x04, 0x63, 0x31, 0x30, 0x00,
		0x07, 0x01, 0x10, 0x18, 0x04, 0x63, 0x31, 0x31, 0x00,
		0x08, 0x01, 0x2c, 0x1a, 0x04, 0x63, 0x31, 0x32, 0x00,
		0x0a, 0x01, 0xa4, 0x01, 0x1c, 0x04, 0x63, 0x31, 0x33, 0x00,

		0x06, // table name
		0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x00,
		// sleep time
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	parser := NewTMQRawDataParser()
	blockInfos, err := parser.Parse(unsafe.Pointer(&data[0]))
	assert.NoError(t, err)
	assert.Equal(t, 1, len(blockInfos))
	assert.Equal(t, 0, blockInfos[0].Precision)
	assert.Equal(t, 14, len(blockInfos[0].Schema))
	assert.Equal(t, []*TMQRawDataSchema{
		{
			ColType: 9,
			Flag:    1,
			Bytes:   8,
			ColID:   1,
			Name:    "ts",
		},
		{
			ColType: 1,
			Flag:    1,
			Bytes:   1,
			ColID:   2,
			Name:    "c1",
		},
		{
			ColType: 2,
			Flag:    1,
			Bytes:   1,
			ColID:   3,
			Name:    "c2",
		},
		{
			ColType: 3,
			Flag:    1,
			Bytes:   2,
			ColID:   4,
			Name:    "c3",
		},
		{
			ColType: 4,
			Flag:    1,
			Bytes:   4,
			ColID:   5,
			Name:    "c4",
		},
		{
			ColType: 5,
			Flag:    1,
			Bytes:   8,
			ColID:   6,
			Name:    "c5",
		},
		{
			ColType: 11,
			Flag:    1,
			Bytes:   1,
			ColID:   7,
			Name:    "c6",
		},
		{
			ColType: 12,
			Flag:    1,
			Bytes:   2,
			ColID:   8,
			Name:    "c7",
		},
		{
			ColType: 13,
			Flag:    1,
			Bytes:   4,
			ColID:   9,
			Name:    "c8",
		},
		{
			ColType: 14,
			Flag:    1,
			Bytes:   8,
			ColID:   10,
			Name:    "c9",
		},
		{
			ColType: 6,
			Flag:    1,
			Bytes:   4,
			ColID:   11,
			Name:    "c10",
		},
		{
			ColType: 7,
			Flag:    1,
			Bytes:   8,
			ColID:   12,
			Name:    "c11",
		},
		{
			ColType: 8,
			Flag:    1,
			Bytes:   22,
			ColID:   13,
			Name:    "c12",
		},
		{
			ColType: 10,
			Flag:    1,
			Bytes:   82,
			ColID:   14,
			Name:    "c13",
		},
	}, blockInfos[0].Schema)
	assert.Equal(t, "t_all", blockInfos[0].TableName)
	value := ReadBlockSimple(blockInfos[0].RawBlock, blockInfos[0].Precision)
	expect := []driver.Value{
		time.Unix(0, 1713766021022000000).Local(),
		true,
		int8(2),
		int16(3),
		int32(4),
		int64(5),
		uint8(6),
		uint16(7),
		uint32(8),
		uint64(9),
		float32(10.123),
		float64(11.123),
		"binary",
		"nchar",
	}
	assert.Equal(t, [][]driver.Value{expect}, value)
}
